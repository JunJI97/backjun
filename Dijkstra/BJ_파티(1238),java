import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.PriorityQueue;
import java.util.StringTokenizer;
 

public class Main {  
	public static int V, E, target; 
	public static List<List<Node>> map;
	public static int[] dist;
	public static final int INF = Integer.MAX_VALUE; 
	
	static class Node implements Comparable<Node> {
		int index;
		int weight;
		
		public Node(int index, int weight) {
			this.index = index;
			this.weight = weight;
		}
		
		@Override
		public int compareTo(Node o) {
			return this.weight - o.weight;
		}
	}
	
	public static void main(String[] args) throws IOException {
		// setting
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); 
		StringTokenizer st = new StringTokenizer(br.readLine());
		
		V = Integer.parseInt(st.nextToken()); 
		E = Integer.parseInt(st.nextToken()); 
		target = Integer.parseInt(st.nextToken())-1; 
		 
		map = new ArrayList<>();
		for (int i = 0; i < V; i++) {
			map.add(new ArrayList<>());
		}
		
		for(int i=0; i<E; i++) {
			st = new StringTokenizer(br.readLine());
			int a = Integer.parseInt(st.nextToken())-1; 
			int b = Integer.parseInt(st.nextToken())-1; 
			int weight = Integer.parseInt(st.nextToken()); 
			map.get(a).add(new Node(b,weight)); 
		}
		
		int[] answer = new int[V];
		
		// target으로 가는 길
		for(int i=0; i<V; i++) {
			if(i!=target) {
				Dijkstra(i);
				answer[i] = dist[target];
			} 
		}
		
		// 다익스트라(target) , dist[] 
		Dijkstra(target); // 각자 집으로 돌아가는 길
		for (int i = 0; i < V; i++) {
			answer[i] += dist[i];
		}
		
		int maxV = 0;
		for (int i : answer) {
			if(i > maxV) {
				maxV = i;
			}
		}
		
		System.out.println(maxV);
		
	}

	private static void Dijkstra(int index) {
		PriorityQueue<Node> pq = new PriorityQueue<>();
		boolean[] visited = new boolean[V];
		dist = new int[V];
		Arrays.fill(dist, INF);
		dist[index] = 0;
		
		pq.add(new Node(index,0));
		
		while(!pq.isEmpty()) {
			Node node = pq.poll();
			int now_index = node.index;
			
			if(visited[now_index]) continue;
			visited[now_index] = true;
			
			for(Node c : map.get(now_index)) {
				if(!visited[c.index] && dist[c.index] > c.weight + dist[now_index]) {
					dist[c.index] = c.weight + dist[now_index];
					pq.add(new Node(c.index,dist[c.index]));
				}
			}
			
		}
		
	} 
}

